using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Utils;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference
	/// </summary>
	/// <remarks>
	/// The easiest way to use this class is to wrap an instance in a CompiledAlgorithm object and use
	/// the methods on CompiledAlgorithm to set parameters and execute inference.
	/// 
	/// If you instead wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class
	/// 2) Set the value of any externally-set fields e.g. data, priors
	/// 3) Call the Execute(numberOfIterations) method
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.5 at 11:28 PM on Friday, April 12, 2013.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vbool____0 property</summary>
		private bool[][] Vbool____0;
		/// <summary>Field backing the vIDistributionLtVector__Gt0 property</summary>
		private IDistribution<Vector[]> VIDistributionLtVector__Gt0;
		/// <summary>The number of iterations last computed by Changed_vbool____0_vIDistributionLtVector__Gt0. Set this to zero to force re-execution of Changed_vbool____0_vIDistributionLtVector__Gt0</summary>
		public int Changed_vbool____0_vIDistributionLtVector__Gt0_iterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0</summary>
		public int Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_vIDistributionLtVector__Gt0. Set this to zero to force re-execution of Changed_vIDistributionLtVector__Gt0</summary>
		public int Changed_vIDistributionLtVector__Gt0_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0. Set this to zero to force re-execution of Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0</summary>
		public int Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_iterationsDone;
		/// <summary>True if Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0 has performed initialisation. Set this to false to force re-execution of Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0</summary>
		public bool Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_isInitialised;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0</summary>
		public int Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0</summary>
		public bool Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_isInitialised;
		/// <summary>Message to use of 'pi'</summary>
		public DistributionRefArray<Dirichlet,Vector> pi_use_F;
		/// <summary>Messages to use of 'pi'</summary>
		public DistributionRefArray<Dirichlet,Vector>[] pi_use_uses_F;
		/// <summary>The constant 'vDirichlet0'</summary>
		public Dirichlet vDirichlet0;
		/// <summary>The constant 'vBeta0'</summary>
		public Beta vBeta0;
		/// <summary>Message from use of 'B'</summary>
		public DistributionStructArray2D<Beta,double> B_use_B;
		/// <summary>Message from use of 'z2'</summary>
		public Discrete[][] z2_use_B;
		/// <summary>Message to marginal of 'pi'</summary>
		public DistributionRefArray<Dirichlet,Vector> pi_marginal_F;
		/// <summary>Message to marginal of 'B'</summary>
		public DistributionStructArray2D<Beta,double> B_marginal_F;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool____0_marginal;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vbool____0'</summary>
		public bool[][] vbool____0
		{			get {
				return this.Vbool____0;
			}
			set {
				if ((value!=null)&&(value.Length!=20)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+20)+" was expected for variable \'vbool____0\'");
				}
				this.Vbool____0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
				this.Changed_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vIDistributionLtVector__Gt0'</summary>
		public IDistribution<Vector[]> vIDistributionLtVector__Gt0
		{			get {
				return this.VIDistributionLtVector__Gt0;
			}
			set {
				this.VIDistributionLtVector__Gt0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vIDistributionLtVector__Gt0_iterationsDone = 0;
				this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_iterationsDone = 0;
				this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
				this.Changed_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vbool____0") {
				return this.vbool____0;
			}
			if (variableName=="vIDistributionLtVector__Gt0") {
				return this.vIDistributionLtVector__Gt0;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vbool____0") {
				this.vbool____0 = (bool[][])value;
				return ;
			}
			if (variableName=="vIDistributionLtVector__Gt0") {
				this.vIDistributionLtVector__Gt0 = (IDistribution<Vector[]>)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>The marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object Marginal(string variableName)
		{
			if (variableName=="pi") {
				return this.PiMarginal();
			}
			if (variableName=="B") {
				return this.BMarginal();
			}
			if (variableName=="vbool____0") {
				return this.Vbool____0Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>The query-specific marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>The output message of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetOutputMessage(string variableName)
		{
			throw new ArgumentException("This class was not built to compute an output message for "+variableName);
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone) {
				this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_isInitialised = false;
				this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
			}
			this.Changed_vIDistributionLtVector__Gt0();
			this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0(initialise);
			this.Constant();
			this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0(initialise);
			this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0(numberOfIterations);
			this.Changed_vbool____0_vIDistributionLtVector__Gt0();
			this.numberOfIterationsDone = numberOfIterations;
		}

		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that depend on the observed value of vIDistributionLtVector__Gt0</summary>
		public void Changed_vIDistributionLtVector__Gt0()
		{
			if (this.Changed_vIDistributionLtVector__Gt0_iterationsDone==1) {
				return ;
			}
			this.pi_use_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.VIDistributionLtVector__Gt0);
			this.pi_use_uses_F = Util.ArrayInit<DistributionRefArray<Dirichlet,Vector>>(20, delegate(int p) {
				return new DistributionRefArray<Dirichlet,Vector>(2, delegate(int _ind) {
					return ArrayHelper.MakeCopy<Dirichlet>(((DistributionRefArray<Dirichlet,Vector>)this.VIDistributionLtVector__Gt0)[p]);
				});
			});
			this.Changed_vIDistributionLtVector__Gt0_iterationsDone = 1;
			this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of vIDistributionLtVector__Gt0 and must reset on changes to numberOfIterationsDecreased and vbool____0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		public void Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0(bool initialise)
		{
			if ((this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_iterationsDone==1)&&((!initialise)||this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_isInitialised)) {
				return ;
			}
			// Create array for 'pi_use' Forwards messages.
			this.pi_use_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.VIDistributionLtVector__Gt0);
			// Create array for 'pi_use_uses' Forwards messages.
			this.pi_use_uses_F = Util.ArrayInit<DistributionRefArray<Dirichlet,Vector>>(20, delegate(int p) {
				return new DistributionRefArray<Dirichlet,Vector>(2, delegate(int _ind) {
					return ArrayHelper.MakeCopy<Dirichlet>(((DistributionRefArray<Dirichlet,Vector>)this.VIDistributionLtVector__Gt0)[p]);
				});
			});
			this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_iterationsDone = 1;
			this.Changed_vIDistributionLtVector__Gt0_Init_numberOfIterationsDecreased_vbool____0_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		public void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			this.vDirichlet0 = Dirichlet.Uniform(2);
			this.vBeta0 = new Beta(1, 1);
			// Create array for 'B_use' Backwards messages.
			this.B_use_B = new DistributionStructArray2D<Beta,double>(2, 2);
			// Create array for replicates of 'z2_use_B'
			this.z2_use_B = new Discrete[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_use_B'
				this.z2_use_B[p] = new Discrete[20];
			}
			this.Constant_iterationsDone = 1;
			this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
			this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and vbool____0 and vIDistributionLtVector__Gt0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		public void Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_isInitialised)) {
				return ;
			}
			for(int kp = 0; kp<2; kp++) {
				for(int kq = 0; kq<2; kq++) {
					this.B_use_B[kp, kq] = ArrayHelper.MakeUniform<Beta>(this.vBeta0);
				}
			}
			for(int p = 0; p<20; p++) {
				for(int q = 0; q<20; q++) {
					this.z2_use_B[p][q] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
				}
			}
			this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vbool____0 and vIDistributionLtVector__Gt0</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		public void Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone==numberOfIterations) {
				return ;
			}
			this.pi_marginal_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.VIDistributionLtVector__Gt0);
			// Create array for 'pi_marginal' Forwards messages.
			this.pi_marginal_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.VIDistributionLtVector__Gt0);
			// Message from use of 'pi'
			DistributionRefArray<Dirichlet,Vector> pi_use_B = default(DistributionRefArray<Dirichlet,Vector>);
			// Create array for 'pi_use' Backwards messages.
			pi_use_B = new DistributionRefArray<Dirichlet,Vector>(20);
			for(int p = 0; p<20; p++) {
				pi_use_B[p] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
			}
			// Messages from use of 'pi'
			DistributionRefArray<Dirichlet,Vector>[] pi_use_uses_B = default(DistributionRefArray<Dirichlet,Vector>[]);
			// Create array for 'pi_use_uses' Backwards messages.
			pi_use_uses_B = new DistributionRefArray<Dirichlet,Vector>[20];
			for(int p = 0; p<20; p++) {
				// Create array for 'pi_use_uses' Backwards messages.
				pi_use_uses_B[p] = new DistributionRefArray<Dirichlet,Vector>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					pi_use_uses_B[p][_ind] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
				}
			}
			// Create array for replicates of 'z1_F'
			Discrete[][] z1_F = new Discrete[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z1_F'
				z1_F[p] = new Discrete[20];
				for(int q = 0; q<20; q++) {
					z1_F[p][q] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
				}
			}
			// Create array for replicates of '_hoist'
			Discrete[] _hoist = new Discrete[20];
			for(int p = 0; p<20; p++) {
				for(int q = 0; q<20; q++) {
					_hoist[p] = ArrayHelper.CopyStorage<Discrete>(z1_F[p][q]);
					q = 20-1;
				}
			}
			// Create array for replicates of 'z1_selector_uses_B'
			Discrete[][][] z1_selector_uses_B = new Discrete[20][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z1_selector_uses_B'
				z1_selector_uses_B[p] = new Discrete[20][];
				for(int q = 0; q<20; q++) {
					// Create array for 'z1_selector_uses' Backwards messages.
					z1_selector_uses_B[p][q] = new Discrete[3];
					for(int _ind = 0; _ind<3; _ind++) {
						z1_selector_uses_B[p][q][_ind] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
					}
				}
			}
			// Create array for replicates of 'z1_selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][][] z1_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[20][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z1_selector_cases_uses_B'
				z1_selector_cases_uses_B[p] = new DistributionStructArray<Bernoulli,bool>[20][];
				for(int q = 0; q<20; q++) {
					// Create array for 'z1_selector_cases_uses' Backwards messages.
					z1_selector_cases_uses_B[p][q] = new DistributionStructArray<Bernoulli,bool>[14];
					for(int _ind = 0; _ind<14; _ind++) {
						// Create array for 'z1_selector_cases_uses' Backwards messages.
						z1_selector_cases_uses_B[p][q][_ind] = new DistributionStructArray<Bernoulli,bool>(2);
						for(int _iv = 0; _iv<2; _iv++) {
							z1_selector_cases_uses_B[p][q][_ind][_iv] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
						}
					}
				}
			}
			// Create array for replicates of 'z2_F'
			Discrete[][] z2_F = new Discrete[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_F'
				z2_F[p] = new Discrete[20];
				for(int q = 0; q<20; q++) {
					z2_F[p][q] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
				}
			}
			// Create array for replicates of '_hoist2'
			Discrete[] _hoist2 = new Discrete[20];
			for(int q = 0; q<20; q++) {
				for(int p = 0; p<20; p++) {
					_hoist2[q] = ArrayHelper.CopyStorage<Discrete>(z2_F[p][q]);
					p = 20-1;
				}
			}
			// Create array for replicates of 'z2_cond_z1_kp_selector_uses_B'
			Discrete[][][][] z2_cond_z1_kp_selector_uses_B = new Discrete[20][][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_cond_z1_kp_selector_uses_B'
				z2_cond_z1_kp_selector_uses_B[p] = new Discrete[20][][];
				for(int q = 0; q<20; q++) {
					// Create array for replicates of 'z2_cond_z1_kp_selector_uses_B'
					z2_cond_z1_kp_selector_uses_B[p][q] = new Discrete[2][];
					for(int kp = 0; kp<2; kp++) {
						// Create array for 'z2_cond_z1_kp_selector_uses' Backwards messages.
						z2_cond_z1_kp_selector_uses_B[p][q][kp] = new Discrete[2];
						for(int _ind = 0; _ind<2; _ind++) {
							z2_cond_z1_kp_selector_uses_B[p][q][kp][_ind] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
						}
					}
				}
			}
			// Create array for replicates of 'z2_cond_z1_kp_selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][][][] z2_cond_z1_kp_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[20][][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_cond_z1_kp_selector_cases_uses_B'
				z2_cond_z1_kp_selector_cases_uses_B[p] = new DistributionStructArray<Bernoulli,bool>[20][][];
				for(int q = 0; q<20; q++) {
					// Create array for replicates of 'z2_cond_z1_kp_selector_cases_uses_B'
					z2_cond_z1_kp_selector_cases_uses_B[p][q] = new DistributionStructArray<Bernoulli,bool>[2][];
					for(int kp = 0; kp<2; kp++) {
						// Create array for 'z2_cond_z1_kp_selector_cases_uses' Backwards messages.
						z2_cond_z1_kp_selector_cases_uses_B[p][q][kp] = new DistributionStructArray<Bernoulli,bool>[3];
						for(int _ind = 0; _ind<3; _ind++) {
							// Create array for 'z2_cond_z1_kp_selector_cases_uses' Backwards messages.
							z2_cond_z1_kp_selector_cases_uses_B[p][q][kp][_ind] = new DistributionStructArray<Bernoulli,bool>(2);
							for(int _iv2 = 0; _iv2<2; _iv2++) {
								z2_cond_z1_kp_selector_cases_uses_B[p][q][kp][_ind][_iv2] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
							}
						}
					}
				}
			}
			// Create array for replicates of '_hoist12'
			Beta[][] _hoist12 = new Beta[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of '_hoist12'
				_hoist12[p] = new Beta[20];
				for(int q = 0; q<20; q++) {
					for(int kp = 0; kp<2; kp++) {
						for(int kq = 0; kq<2; kq++) {
							_hoist12[p][q] = ArrayHelper.MakeUniform<Beta>(this.vBeta0);
							kp = 2-1;
							kq = 2-1;
						}
					}
					for(int kp = 0; kp<2; kp++) {
						for(int kq = 0; kq<2; kq++) {
							_hoist12[p][q] = BernoulliFromBetaOp.ProbTrueAverageLogarithm(this.Vbool____0[p][q]);
							kp = 2-1;
							kq = 2-1;
						}
					}
				}
			}
			// Create array for replicates of '_hoist13'
			Beta[][][] _hoist13 = new Beta[20][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of '_hoist13'
				_hoist13[p] = new Beta[20][];
				for(int q = 0; q<20; q++) {
					// Create array for replicates of '_hoist13'
					_hoist13[p][q] = new Beta[2];
				}
			}
			// Create array for replicates of 'B_kp_kq_cond_z1_B'
			DistributionStructArray<Beta,double>[][][] B_kp_kq_cond_z1_B = new DistributionStructArray<Beta,double>[20][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'B_kp_kq_cond_z1_B'
				B_kp_kq_cond_z1_B[p] = new DistributionStructArray<Beta,double>[20][];
				for(int q = 0; q<20; q++) {
					// Create array for replicates of 'B_kp_kq_cond_z1_B'
					B_kp_kq_cond_z1_B[p][q] = new DistributionStructArray<Beta,double>[2];
					for(int kp = 0; kp<2; kp++) {
						// Create array for 'B_kp_kq_cond_z1' Backwards messages.
						B_kp_kq_cond_z1_B[p][q][kp] = new DistributionStructArray<Beta,double>(2);
						for(int kq = 0; kq<2; kq++) {
							B_kp_kq_cond_z1_B[p][q][kp][kq] = ArrayHelper.MakeUniform<Beta>(this.vBeta0);
						}
					}
					for(int kq = 0; kq<2; kq++) {
						for(int kp = 0; kp<2; kp++) {
							_hoist13[p][q][kq] = ArrayHelper.CopyStorage<Beta>(B_kp_kq_cond_z1_B[p][q][kp][kq]);
							kp = 2-1;
						}
					}
				}
			}
			// Create array for replicates of 'B_rep_rep_B'
			DistributionStructArray<Beta,double>[][][] B_rep_rep_B = new DistributionStructArray<Beta,double>[20][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'B_rep_rep_B'
				B_rep_rep_B[p] = new DistributionStructArray<Beta,double>[2][];
				for(int kp = 0; kp<2; kp++) {
					// Create array for replicates of 'B_rep_rep_B'
					B_rep_rep_B[p][kp] = new DistributionStructArray<Beta,double>[2];
					for(int kq = 0; kq<2; kq++) {
						// Create array for 'B_rep_rep' Backwards messages.
						B_rep_rep_B[p][kp][kq] = new DistributionStructArray<Beta,double>(20);
						for(int q = 0; q<20; q++) {
							B_rep_rep_B[p][kp][kq][q] = ArrayHelper.MakeUniform<Beta>(this.vBeta0);
						}
					}
				}
			}
			// Create array for replicates of 'B_rep_B'
			DistributionStructArray<Beta,double>[][] B_rep_B = new DistributionStructArray<Beta,double>[2][];
			for(int kp = 0; kp<2; kp++) {
				// Create array for replicates of 'B_rep_B'
				B_rep_B[kp] = new DistributionStructArray<Beta,double>[2];
				for(int kq = 0; kq<2; kq++) {
					// Create array for 'B_rep' Backwards messages.
					B_rep_B[kp][kq] = new DistributionStructArray<Beta,double>(20);
					for(int p = 0; p<20; p++) {
						B_rep_B[kp][kq][p] = ArrayHelper.MakeUniform<Beta>(this.vBeta0);
					}
				}
			}
			// Create array for 'B_marginal' Forwards messages.
			this.B_marginal_F = new DistributionStructArray2D<Beta,double>(2, 2);
			for(int kp = 0; kp<2; kp++) {
				for(int kq = 0; kq<2; kq++) {
					this.B_marginal_F[kp, kq] = ArrayHelper.MakeUniform<Beta>(this.vBeta0);
				}
			}
			// Create array for replicates of 'z2_cond_z1_kp_selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[][][] z2_cond_z1_kp_selector_cases_B = new DistributionStructArray<Bernoulli,bool>[20][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_cond_z1_kp_selector_cases_B'
				z2_cond_z1_kp_selector_cases_B[p] = new DistributionStructArray<Bernoulli,bool>[20][];
				for(int q = 0; q<20; q++) {
					// Create array for replicates of 'z2_cond_z1_kp_selector_cases_B'
					z2_cond_z1_kp_selector_cases_B[p][q] = new DistributionStructArray<Bernoulli,bool>[2];
					for(int kp = 0; kp<2; kp++) {
						// Create array for 'z2_cond_z1_kp_selector_cases' Backwards messages.
						z2_cond_z1_kp_selector_cases_B[p][q][kp] = new DistributionStructArray<Bernoulli,bool>(2);
						for(int _iv2 = 0; _iv2<2; _iv2++) {
							z2_cond_z1_kp_selector_cases_B[p][q][kp][_iv2] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
						}
					}
				}
			}
			// Create array for replicates of 'z2_cond_z1_kp_selector_B'
			Discrete[][][] z2_cond_z1_kp_selector_B = new Discrete[20][][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_cond_z1_kp_selector_B'
				z2_cond_z1_kp_selector_B[p] = new Discrete[20][];
				for(int q = 0; q<20; q++) {
					// Create array for replicates of 'z2_cond_z1_kp_selector_B'
					z2_cond_z1_kp_selector_B[p][q] = new Discrete[2];
					for(int kp = 0; kp<2; kp++) {
						z2_cond_z1_kp_selector_B[p][q][kp] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
					}
				}
			}
			// Create array for replicates of 'z2_cond_z1_B'
			DistributionRefArray<Discrete,int>[][] z2_cond_z1_B = new DistributionRefArray<Discrete,int>[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_cond_z1_B'
				z2_cond_z1_B[p] = new DistributionRefArray<Discrete,int>[20];
				for(int q = 0; q<20; q++) {
					// Create array for 'z2_cond_z1' Backwards messages.
					z2_cond_z1_B[p][q] = new DistributionRefArray<Discrete,int>(2);
					for(int kp = 0; kp<2; kp++) {
						z2_cond_z1_B[p][q][kp] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
					}
				}
			}
			// Message to marginal of 'z2'
			// Create array for replicates of 'z2_marginal_F'
			Discrete[][] z2_marginal_F = new Discrete[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z2_marginal_F'
				z2_marginal_F[p] = new Discrete[20];
				for(int q = 0; q<20; q++) {
					z2_marginal_F[p][q] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
				}
			}
			// Create array for replicates of 'z1_selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[][] z1_selector_cases_B = new DistributionStructArray<Bernoulli,bool>[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z1_selector_cases_B'
				z1_selector_cases_B[p] = new DistributionStructArray<Bernoulli,bool>[20];
				for(int q = 0; q<20; q++) {
					// Create array for 'z1_selector_cases' Backwards messages.
					z1_selector_cases_B[p][q] = new DistributionStructArray<Bernoulli,bool>(2);
					for(int _iv = 0; _iv<2; _iv++) {
						z1_selector_cases_B[p][q][_iv] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
					}
				}
			}
			// Create array for replicates of 'z1_selector_B'
			Discrete[][] z1_selector_B = new Discrete[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z1_selector_B'
				z1_selector_B[p] = new Discrete[20];
				for(int q = 0; q<20; q++) {
					z1_selector_B[p][q] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
				}
			}
			// Message to marginal of 'z1'
			// Create array for replicates of 'z1_marginal_F'
			Discrete[][] z1_marginal_F = new Discrete[20][];
			for(int p = 0; p<20; p++) {
				// Create array for replicates of 'z1_marginal_F'
				z1_marginal_F[p] = new Discrete[20];
				for(int q = 0; q<20; q++) {
					z1_marginal_F[p][q] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vDirichlet0.Dimension));
				}
			}
			// Create array for replicates of 'pi_rep_B'
			DistributionRefArray<Dirichlet,Vector>[] pi_rep_B = new DistributionRefArray<Dirichlet,Vector>[20];
			for(int p = 0; p<20; p++) {
				// Create array for 'pi_rep' Backwards messages.
				pi_rep_B[p] = new DistributionRefArray<Dirichlet,Vector>(20);
				for(int q = 0; q<20; q++) {
					pi_rep_B[p][q] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
				}
			}
			// Create array for replicates of 'pi_rep2_B'
			DistributionRefArray<Dirichlet,Vector>[] pi_rep2_B = new DistributionRefArray<Dirichlet,Vector>[20];
			for(int q = 0; q<20; q++) {
				// Create array for 'pi_rep2' Backwards messages.
				pi_rep2_B[q] = new DistributionRefArray<Dirichlet,Vector>(20);
				for(int _a = 0; _a<20; _a++) {
					pi_rep2_B[q][_a] = ArrayHelper.MakeUniform<Dirichlet>(this.vDirichlet0);
				}
				for(int p = 0; p<20; p++) {
					_hoist2[q] = DiscreteFromDirichletOp.SampleAverageLogarithm(this.pi_use_uses_F[q][1], _hoist2[q]);
					p = 20-1;
				}
				for(int p = 0; p<20; p++) {
					// Message to 'z2_marginal' from Variable factor
					z2_marginal_F[p][q] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.z2_use_B[p][q], _hoist2[q], z2_marginal_F[p][q]);
				}
			}
			for(int kq = 0; kq<2; kq++) {
				for(int kp = 0; kp<2; kp++) {
					// Message to 'B_marginal' from Variable factor
					this.B_marginal_F[kp, kq] = VariableVmpOp.MarginalAverageLogarithm<Beta>(this.B_use_B[kp, kq], this.vBeta0, this.B_marginal_F[kp, kq]);
					for(int p = 0; p<20; p++) {
						for(int q = 0; q<20; q++) {
							// Message to 'z2_cond_z1_kp_selector_cases_uses' from Bernoulli factor
							z2_cond_z1_kp_selector_cases_uses_B[p][q][kp][2][kq] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.AverageLogFactor(this.Vbool____0[p][q], this.B_marginal_F[kp, kq]));
						}
					}
				}
			}
			for(int p = 0; p<20; p++) {
				for(int q = 0; q<20; q++) {
					for(int kp = 0; kp<2; kp++) {
						// Message to 'z2_cond_z1_kp_selector_cases' from Replicate factor
						z2_cond_z1_kp_selector_cases_B[p][q][kp] = ReplicateOp.DefAverageLogarithm<DistributionStructArray<Bernoulli,bool>>(z2_cond_z1_kp_selector_cases_uses_B[p][q][kp], z2_cond_z1_kp_selector_cases_B[p][q][kp]);
						// Message to 'z1_selector_cases_uses' from CasesInt factor
						z1_selector_cases_uses_B[p][q][6][kp] = Bernoulli.FromLogOdds(IntCasesOp.AverageLogFactor(z2_cond_z1_kp_selector_cases_B[p][q][kp], z2_marginal_F[p][q]));
					}
					// Message to 'z1_selector_cases' from Replicate factor
					z1_selector_cases_B[p][q] = ReplicateOp.DefAverageLogarithm<DistributionStructArray<Bernoulli,bool>>(z1_selector_cases_uses_B[p][q], z1_selector_cases_B[p][q]);
					// Message to 'z1_selector_uses' from CasesInt factor
					z1_selector_uses_B[p][q][0] = IntCasesOp.IAverageLogarithm(z1_selector_cases_B[p][q], z1_selector_uses_B[p][q][0]);
					// Message to 'z1_selector' from Replicate factor
					z1_selector_B[p][q] = ReplicateOp.DefAverageLogarithm<Discrete>(z1_selector_uses_B[p][q], z1_selector_B[p][q]);
				}
				for(int q = 0; q<20; q++) {
					_hoist[p] = DiscreteFromDirichletOp.SampleAverageLogarithm(this.pi_use_F[p], _hoist[p]);
					q = 20-1;
				}
				for(int q = 0; q<20; q++) {
					// Message to 'z1_marginal' from Variable factor
					z1_marginal_F[p][q] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(z1_selector_B[p][q], _hoist[p], z1_marginal_F[p][q]);
					for(int kq = 0; kq<2; kq++) {
						for(int kp = 0; kp<2; kp++) {
							_hoist13[p][q][kq] = GateEnterOneOp<double>.ValueAverageLogarithm<Beta>(_hoist12[p][q], z2_marginal_F[p][q], kq, _hoist13[p][q][kq]);
							kp = 2-1;
						}
					}
				}
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int p = 0; p<20; p++) {
					for(int q = 0; q<20; q++) {
						for(int kp = 0; kp<2; kp++) {
							for(int kq = 0; kq<2; kq++) {
								// Message to 'B_rep_rep' from EnterOne factor
								B_rep_rep_B[p][kp][kq][q] = GateEnterOneOp<double>.ValueAverageLogarithm<Beta>(_hoist13[p][q][kq], z1_marginal_F[p][q], kp, B_rep_rep_B[p][kp][kq][q]);
							}
						}
					}
					for(int kp = 0; kp<2; kp++) {
						for(int kq = 0; kq<2; kq++) {
							// Message to 'B_rep' from Replicate factor
							B_rep_B[kp][kq][p] = ReplicateOp.DefAverageLogarithm<Beta>(B_rep_rep_B[p][kp][kq], B_rep_B[kp][kq][p]);
						}
					}
				}
				for(int kp = 0; kp<2; kp++) {
					for(int kq = 0; kq<2; kq++) {
						// Message to 'B_use' from Replicate factor
						this.B_use_B[kp, kq] = ReplicateOp.DefAverageLogarithm<Beta>(B_rep_B[kp][kq], this.B_use_B[kp, kq]);
						// Message to 'B_marginal' from Variable factor
						this.B_marginal_F[kp, kq] = VariableVmpOp.MarginalAverageLogarithm<Beta>(this.B_use_B[kp, kq], this.vBeta0, this.B_marginal_F[kp, kq]);
						for(int p = 0; p<20; p++) {
							for(int q = 0; q<20; q++) {
								// Message to 'z2_cond_z1_kp_selector_cases_uses' from Bernoulli factor
								z2_cond_z1_kp_selector_cases_uses_B[p][q][kp][2][kq] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.AverageLogFactor(this.Vbool____0[p][q], this.B_marginal_F[kp, kq]));
							}
						}
					}
					for(int p = 0; p<20; p++) {
						for(int q = 0; q<20; q++) {
							// Message to 'z2_cond_z1_kp_selector_cases' from Replicate factor
							z2_cond_z1_kp_selector_cases_B[p][q][kp] = ReplicateOp.DefAverageLogarithm<DistributionStructArray<Bernoulli,bool>>(z2_cond_z1_kp_selector_cases_uses_B[p][q][kp], z2_cond_z1_kp_selector_cases_B[p][q][kp]);
							// Message to 'z1_selector_cases_uses' from CasesInt factor
							z1_selector_cases_uses_B[p][q][6][kp] = Bernoulli.FromLogOdds(IntCasesOp.AverageLogFactor(z2_cond_z1_kp_selector_cases_B[p][q][kp], z2_marginal_F[p][q]));
						}
					}
				}
				for(int p = 0; p<20; p++) {
					for(int q = 0; q<20; q++) {
						// Message to 'z1_selector_cases' from Replicate factor
						z1_selector_cases_B[p][q] = ReplicateOp.DefAverageLogarithm<DistributionStructArray<Bernoulli,bool>>(z1_selector_cases_uses_B[p][q], z1_selector_cases_B[p][q]);
						// Message to 'z1_selector_uses' from CasesInt factor
						z1_selector_uses_B[p][q][0] = IntCasesOp.IAverageLogarithm(z1_selector_cases_B[p][q], z1_selector_uses_B[p][q][0]);
						// Message to 'z1_selector' from Replicate factor
						z1_selector_B[p][q] = ReplicateOp.DefAverageLogarithm<Discrete>(z1_selector_uses_B[p][q], z1_selector_B[p][q]);
					}
					for(int q = 0; q<20; q++) {
						_hoist[p] = DiscreteFromDirichletOp.SampleAverageLogarithm(this.pi_use_F[p], _hoist[p]);
						q = 20-1;
					}
					for(int q = 0; q<20; q++) {
						// Message to 'z1_marginal' from Variable factor
						z1_marginal_F[p][q] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(z1_selector_B[p][q], _hoist[p], z1_marginal_F[p][q]);
						for(int kp = 0; kp<2; kp++) {
							// Message to 'z2_cond_z1_kp_selector_uses' from CasesInt factor
							z2_cond_z1_kp_selector_uses_B[p][q][kp][0] = IntCasesOp.IAverageLogarithm(z2_cond_z1_kp_selector_cases_B[p][q][kp], z2_cond_z1_kp_selector_uses_B[p][q][kp][0]);
							// Message to 'z2_cond_z1_kp_selector' from Replicate factor
							z2_cond_z1_kp_selector_B[p][q][kp] = ReplicateOp.DefAverageLogarithm<Discrete>(z2_cond_z1_kp_selector_uses_B[p][q][kp], z2_cond_z1_kp_selector_B[p][q][kp]);
							// Message to 'z2_cond_z1' from Copy factor
							z2_cond_z1_B[p][q][kp] = ArrayHelper.SetTo<Discrete>(z2_cond_z1_B[p][q][kp], z2_cond_z1_kp_selector_B[p][q][kp]);
						}
						// Message to 'z2_use' from Enter factor
						this.z2_use_B[p][q] = GateEnterOp<int>.ValueAverageLogarithm<Discrete>(z2_cond_z1_B[p][q], z1_marginal_F[p][q], this.z2_use_B[p][q]);
					}
				}
				for(int q = 0; q<20; q++) {
					for(int p = 0; p<20; p++) {
						_hoist2[q] = DiscreteFromDirichletOp.SampleAverageLogarithm(this.pi_use_uses_F[q][1], _hoist2[q]);
						p = 20-1;
					}
					for(int p = 0; p<20; p++) {
						// Message to 'z2_marginal' from Variable factor
						z2_marginal_F[p][q] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(this.z2_use_B[p][q], _hoist2[q], z2_marginal_F[p][q]);
						// Message to 'pi_rep2' from Discrete factor
						pi_rep2_B[q][p] = DiscreteFromDirichletOp.ProbsAverageLogarithm(z2_marginal_F[p][q], pi_rep2_B[q][p]);
					}
					// Message to 'pi_use_uses' from Replicate factor
					pi_use_uses_B[q][1] = ReplicateOp.DefAverageLogarithm<Dirichlet>(pi_rep2_B[q], pi_use_uses_B[q][1]);
					for(int p = 0; p<20; p++) {
						// Message to 'pi_rep' from Discrete factor
						pi_rep_B[p][q] = DiscreteFromDirichletOp.ProbsAverageLogarithm(z1_marginal_F[p][q], pi_rep_B[p][q]);
					}
				}
				for(int p = 0; p<20; p++) {
					// Message to 'pi_use_uses' from Replicate factor
					pi_use_uses_B[p][0] = ReplicateOp.DefAverageLogarithm<Dirichlet>(pi_rep_B[p], pi_use_uses_B[p][0]);
					// Message to 'pi_use' from Replicate factor
					pi_use_B[p] = ReplicateOp.DefAverageLogarithm<Dirichlet>(pi_use_uses_B[p], pi_use_B[p]);
					// Message to 'pi_marginal' from Variable factor
					this.pi_marginal_F[p] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(pi_use_B[p], this.vDirichlet0, this.pi_marginal_F[p]);
					// Message to 'pi_use' from Variable factor
					this.pi_use_F[p] = ArrayHelper.SetTo<Dirichlet>(this.pi_use_F[p], this.pi_marginal_F[p]);
					for(int q = 0; q<20; q++) {
						for(int kq = 0; kq<2; kq++) {
							for(int kp = 0; kp<2; kp++) {
								_hoist13[p][q][kq] = GateEnterOneOp<double>.ValueAverageLogarithm<Beta>(_hoist12[p][q], z2_marginal_F[p][q], kq, _hoist13[p][q][kq]);
								kp = 2-1;
							}
						}
					}
					// Message to 'pi_use_uses' from Replicate factor
					this.pi_use_uses_F[p] = ArrayHelper.SetAllElementsTo<DistributionRefArray<Dirichlet,Vector>,Dirichlet>(this.pi_use_uses_F[p], this.pi_use_F[p]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_numberOfIterationsDecreased_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'pi' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Dirichlet,Vector> PiMarginal()
		{
			return this.pi_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'B' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray2D<Beta,double> BMarginal()
		{
			return this.B_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of vbool____0 and vIDistributionLtVector__Gt0</summary>
		public void Changed_vbool____0_vIDistributionLtVector__Gt0()
		{
			if (this.Changed_vbool____0_vIDistributionLtVector__Gt0_iterationsDone==1) {
				return ;
			}
			this.vbool____0_marginal = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(20, delegate(int p) {
				return new DistributionStructArray<Bernoulli,bool>(20, delegate(int q) {
					return ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				});
			});
			this.vbool____0_marginal = Distribution.SetPoint<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.vbool____0_marginal, this.Vbool____0);
			this.Changed_vbool____0_vIDistributionLtVector__Gt0_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool____0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Vbool____0Marginal()
		{
			return this.vbool____0_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
